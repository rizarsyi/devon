<?xml version="1.0" encoding="UTF-8"?>
<!--

 Copyright (C) 2010 Daniel Pozzi <bonndan76@googlemail.com>

 This library is free software; you can redistribute it and/or
 modify it under the terms of the GNU Library General Public
 License as published by the Free Software Foundation; either
 version 2 of the License, or (at your option) any later version.

 This library is distributed in the hope that it will be useful,
 but WITHOUT ANY WARRANTY; without even the implied warranty of
 MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
 Library General Public License for more details.

 You should have received a copy of the GNU Library General Public
 License along with this library; if not, write to the
 Free Software Foundation, Inc., 59 Temple Place - Suite 330,
 Boston, MA 02111-1307, USA.

-->

<language id="objj" _name="Objective-J" version="2.0" _section="Sources">
  <metadata>
    <property name="mimetypes">text/x-csrc</property>
    <property name="globs">*.j</property>
    <property name="line-comment-start">//</property>
    <property name="block-comment-start">/*</property>
    <property name="block-comment-end">*/</property>
  </metadata>

  <styles>
    <style id="comment" _name="Comment" map-to="def:comment"/>
    <style id="error" _name="Error" map-to="def:error"/>
    <style id="string" _name="String" map-to="def:string"/>
    <style id="keyword" _name="Keyword" map-to="def:keyword"/>
    <style id="type" _name="Data Type" map-to="def:type"/>
    <style id="special-token" _name="Special Token" map-to="def:preprocessor"/>
    <style id="null-value" _name="Null Value" map-to="def:special-constant"/>
    <style id="boolean" _name="Boolean" map-to="def:boolean"/>
    <style id="floating-point" _name="Floating point number" map-to="def:floating-point"/>
    <style id="decimal" _name="Decimal number" map-to="def:decimal"/>
  </styles>

  <definitions>

    <context id="line-comment" style-ref="comment" end-at-line-end="true" class="comment" class-disabled="no-spell-check">
      <start>//</start>
      <include>
        <context ref="def:in-line-comment"/>
      </include>
    </context>

    <context id="block-comment" style-ref="comment" class="comment" class-disabled="no-spell-check">
      <start>/\*</start>
      <end>\*/</end>
      <include>
        <context ref="def:in-comment"/>
      </include>
    </context>

    <context id="close-comment-outside-comment" style-ref="error">
      <match>\*/(?!\*)</match>
    </context>

    <context id="nesting-comment" style-ref="comment" class="comment" class-disabled="no-spell-check">
      <start>/\+</start>
      <end>\+/</end>
      <include>
        <context ref="nesting-comment"/>
        <context ref="def:in-comment"/>
      </include>
    </context>

    <context id="double-quoted-string" style-ref="string" class="string" class-disabled="no-spell-check">
      <start>"</start>
      <end>"</end>
      <include>
        <context ref="def:escape"/>
        <context ref="def:line-continue"/>
      </include>
    </context>

    <context id="single-quoted-string" style-ref="string" end-at-line-end="true" class="string" class-disabled="no-spell-check">
      <start>'</start>
      <end>'</end>
      <include>
        <context ref="def:escape"/>
        <context ref="def:line-continue"/>
      </include>
    </context>

    <context id="backtick-quoted-string" style-ref="string" class="string" class-disabled="no-spell-check">
      <start>`</start>
      <end>`</end>
      <include>
        <context ref="def:escape"/>
        <context ref="def:line-continue"/>
      </include>
    </context>

    <define-regex id="idf" extended="true">
            ^(?:-|\+)\s?\([a-zA-Z]*\)([a-zA-Z]*)(?::|\n|\s)
        </define-regex>

    <context id="methods" style-ref="def:identifier">
      <match>\%{idf}</match>
    </context>

        <define-regex id="param" extended="true">
            \s([a-zA-Z]*):
        </define-regex>

    <context id="param-name" style-ref="def:special-char">
      <match>\%{param}</match>
    </context>

    <define-regex id="object" extended="true">
            \[([a-zA-Z]*)
    </define-regex>

    <context id="usedobject" style-ref="def:note">
      <match>\%{object}</match>
    </context>

    <context id="brackets" style-ref="def:note">
      <match>(\[|\])</match>
    </context>

    <context id="objj-defines" style-ref="def:constant">
          <keyword>nil</keyword>
          <keyword>Nil</keyword>
          <keyword>NO</keyword>
          <keyword>YES</keyword>
     </context>

    <context id="keywords" style-ref="keyword">
      <!--<prefix>\@</prefix>-->
      <keyword>implementation</keyword>
      <keyword>alloc</keyword>
      <keyword>accessors</keyword>
      <keyword>body</keyword>
      <keyword>break</keyword>
      <keyword>case</keyword>
      <keyword>cast</keyword>
      <keyword>catch</keyword>
      <keyword>continue</keyword>
      <keyword>debug</keyword>
      <keyword>default</keyword>
      <keyword>delegate</keyword>
      <keyword>delete</keyword>
      <keyword>deprecated</keyword>
      <keyword>do</keyword>
      <keyword>else</keyword>
      <keyword>end</keyword>
      <keyword>final</keyword>
      <keyword>finally</keyword>
      <keyword>for</keyword>
      <keyword>foreach</keyword>
      <keyword>function</keyword>
      <keyword>goto</keyword>
      <keyword>if</keyword>
      <keyword>import</keyword>
      <keyword>in</keyword>
      <keyword>is</keyword>
      <keyword>mixin</keyword>
      <keyword>new</keyword>
      <keyword>private</keyword>
      <keyword>protected</keyword>
      <keyword>public</keyword>
      <keyword>return</keyword>
      <keyword>self</keyword>
      <keyword>super</keyword>
      <keyword>switch</keyword>
      <keyword>selector</keyword>
      <keyword>this</keyword>
      <keyword>throw</keyword>
      <keyword>try</keyword>
      <keyword>typeof</keyword>
      <keyword>var</keyword>
      <keyword>while</keyword>
      <keyword>window</keyword>
      <keyword>with</keyword>
    </context>

    <context id="types" style-ref="type">
      <keyword>alias</keyword>
      <keyword>bool</keyword>
      <keyword>byte</keyword>
      <keyword>cdouble</keyword>
      <keyword>cent</keyword>
      <keyword>cfloat</keyword>
      <keyword>char</keyword>
      <keyword>class</keyword>
      <keyword>creal</keyword>
      <keyword>dchar</keyword>
      <keyword>double</keyword>
      <keyword>enum</keyword>
      <keyword>export</keyword>
      <keyword>float</keyword>
      <keyword>idouble</keyword>
      <keyword>ifloat</keyword>
      <keyword>int</keyword>
      <keyword>interface</keyword>
      <keyword>invariant</keyword>
      <keyword>ireal</keyword>
      <keyword>long</keyword>
      <keyword>module</keyword>
      <keyword>package</keyword>
      <keyword>real</keyword>
      <keyword>short</keyword>
      <keyword>struct</keyword>
      <keyword>template</keyword>
      <keyword>typedef</keyword>
      <keyword>void</keyword>
    </context>

    <context id="special-tokens" style-ref="special-token">
      <keyword>CALayer</keyword>

      <keyword>CPApplication</keyword>
      <keyword>CPBorderlessBridgeWindowMask</keyword>
      <keyword>CPButton</keyword>
      <keyword>CPClosableWindowMask</keyword>
      <keyword>CPColor</keyword>
      <keyword>CPDictionary</keyword>
      <keyword>CPHUDBackgroundWindowMask</keyword>
      <keyword>CPImage</keyword>
      <keyword>CPImageView</keyword>
      <keyword>CPInteger</keyword>
      <keyword>CPMenu</keyword>
      <keyword>CPMenuItem</keyword>
      <keyword>CPNotification</keyword>
      <keyword>CPObject</keyword>
      <keyword>CPPanel</keyword>
      <keyword>CPResizableWindowMask</keyword>
      <keyword>CPString</keyword>
      <keyword>CPTextField</keyword>
      <keyword>CPTimer</keyword>
      <keyword>CPURLConnection</keyword>
      <keyword>CPURLRequest</keyword>
      <keyword>CPView</keyword>
      <keyword>CPViewMinXMargin</keyword>
      <keyword>CPWindow</keyword>
      <keyword>CPWindowController</keyword>

      <keyword>CGPointMake</keyword>
      <keyword>CGRectGetWidth</keyword>
      <keyword>CGRect</keyword>
      <keyword>CGRectMake</keyword>
      <keyword>CGRectMakeZero</keyword>
    </context>

    <context id="null-value" style-ref="null-value">
      <keyword>null</keyword>
      <keyword>nil</keyword>
    </context>

    <context id="boolean" style-ref="boolean">
      <keyword>false</keyword>
      <keyword>true</keyword>
      <keyword>YES</keyword>
    </context>

    <context id="float" style-ref="floating-point">
      <match extended="true">
        (?&lt;![\w\.])
        ([0-9_]+[Ee][-]?[0-9_]+|([0-9_]*\.[0-9_]+|[0-9_]+\.)([Ee][-]?[0-9_]+)?)[fFLi]?
        (?![\w\.])
      </match>
    </context>

    <context id="decimal" style-ref="decimal">
      <match extended="true">
        (?&lt;![\w\.])
        ([1-9][0-9_]*|0)([Uu]([Ll]|LL|ll)?|([Ll]|LL|ll)[Uu]?)?
        (?![\w\.])
      </match>
    </context>

    <context id="objj" class="no-spell-check">
      <include>
        <context ref="def:shebang"/>
        <context ref="js:constructors"/>
        <context ref="line-comment"/>
        <context ref="block-comment"/>
        <context ref="close-comment-outside-comment"/>
        <context ref="nesting-comment"/>
        <context ref="double-quoted-string"/>
        <context ref="single-quoted-string"/>
        <context ref="backtick-quoted-string"/>
        <context ref="keywords"/>
        <context ref="types"/>
        <context ref="objj-defines" />

        <context ref="null-value"/>
        <context ref="boolean"/>
        <context ref="float"/>
        <context ref="decimal"/>

        <context ref="methods" />
        <context ref="param-name" />
        <context ref="special-tokens"/>
        <context ref="usedobject" />
        <context ref="brackets" />
      </include>
    </context>

  </definitions>

</language>

